/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package localization.gui.components;

import java.awt.Dialog;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Properties;
import java.util.Timer;
import localization.controller.MainController;
import localization.controller.TestImageProcessor;
import localization.controller.TestImageProcessor2;
import localization.controller.VapixController;
import localization.controller.tasks.CameraRoutineTask;
import localization.controller.tasks.ImageProcessTask;

/**
 *
 * @author ap
 */
public class ControlPanel extends javax.swing.JPanel {

    /**
     * Creates new form ControlPanle2
     */
    public ControlPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        up = new javax.swing.JButton();
        left = new javax.swing.JButton();
        home = new javax.swing.JButton();
        right = new javax.swing.JButton();
        down = new javax.swing.JButton();
        markers = new javax.swing.JCheckBox();
        zoomIn = new javax.swing.JButton();
        zoomOut = new javax.swing.JButton();
        start = new javax.swing.JButton();
        options = new javax.swing.JButton();

        up.setText("Up");

        left.setText("Left");

        home.setText("Home");

        right.setText("Right");

        down.setText("Down");

        markers.setText("Markers");

        zoomIn.setText("+");

        zoomOut.setText("-");

        start.setText("Strart");

        options.setText("Options");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(down, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(up, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(left, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(home, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(right, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(zoomIn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(zoomOut)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(start, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(markers, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(options, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(up)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(left)
                            .addComponent(home)
                            .addComponent(right)
                            .addComponent(zoomIn)
                            .addComponent(zoomOut)
                            .addComponent(start))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(down)
                            .addComponent(options)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(markers)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton down;
    private javax.swing.JButton home;
    private javax.swing.JButton left;
    private javax.swing.JCheckBox markers;
    private javax.swing.JButton options;
    private javax.swing.JButton right;
    private javax.swing.JButton start;
    private javax.swing.JButton up;
    private javax.swing.JButton zoomIn;
    private javax.swing.JButton zoomOut;
    // End of variables declaration//GEN-END:variables

    public ControlPanel(MainController MC) {
        initComponents();
        
        markers.setSelected(true);

        options.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                OptionsDialog dialog = new OptionsDialog(MC);
                dialog.setAlwaysOnTop(true);
                dialog.setModalityType(Dialog.ModalityType.APPLICATION_MODAL);
                dialog.setLocationRelativeTo(null);
                dialog.setVisible(true);
            }
        });
        start.addActionListener(new ActionListener() {
            private Timer timer;
            private Timer timer2;
            private boolean flag = true;

            @Override
            public void actionPerformed(ActionEvent e) {
                if (flag) {
//                    int period = MC.getInterval1();
//                    int proc_time = MC.getInterval2();
//                    timer = new Timer("ImageProcessTask", true);
//                    timer.scheduleAtFixedRate(new ImageProcessTask(new TestImageProcessor(), MC),
//                            proc_time, proc_time);
//                    timer2 = new Timer("CameraRoutineTask", true);
//                    if (MC.isResetPos()) {
//                        MC.home();
//                    }
//                    timer2.scheduleAtFixedRate(new CameraRoutineTask(MC),
//                            period, period);
                    MC.startRoutine();
                    start.setText("Stop");
                    flag = false;
                    setEnabledButtons(flag);
                } else {
//                    timer.cancel();
//                    timer2.cancel();
//                    if (MC.isResetPos()) {
//                        MC.home();
//                    }
                    MC.stopRoutine();
                    start.setText("Start");
                    flag = true;
                    setEnabledButtons(flag);
//                }
                }
            }
        });
        up.addActionListener(
                new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e
            ) {
                MC.tilt(2);
            }
        }
        );
        left.addActionListener(
                new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e
            ) {
                int degrees = MC.getDegrees();
                MC.pan(-degrees);
            }
        }
        );
        home.addActionListener(
                new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e
            ) {
                MC.home();
            }
        }
        );
        right.addActionListener(
                new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e
            ) {
                int degrees = MC.getDegrees();
                MC.pan(degrees);
            }
        }
        );
        down.addActionListener(
                new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e
            ) {
                MC.tilt(-2);
            }
        }
        );
        //        zoomIn.addActionListener(new ActionListener() {
//            @Override
//            public void actionPerformed(ActionEvent e) {
//                EC.zoomIn(camera);
//            }
//        });
        zoomIn.addMouseListener(
                new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e
            ) {
                super.mouseClicked(e); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void mousePressed(MouseEvent e
            ) {
                MC.continuesZoomIn(); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void mouseReleased(MouseEvent e
            ) {
                MC.stopZoom(); //To change body of generated methods, choose Tools | Templates.
            }

        }
        );
//        zoomOut.addActionListener(new ActionListener() {
//            @Override
//            public void actionPerformed(ActionEvent e) {
//                EC.zoomOut(camera);
//            }
//        });

        zoomOut.addMouseListener(
                new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e
            ) {
                MC.continuesZoomOut(); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void mouseReleased(MouseEvent e
            ) {
                MC.stopZoom(); //To change body of generated methods, choose Tools | Templates.
            }

        }
        );
    }

    public boolean markers() {
        return markers.isSelected();
    }

    public void setEnabledButtons(boolean enable) {
        up.setEnabled(enable);
        left.setEnabled(enable);
        home.setEnabled(enable);
        right.setEnabled(enable);
        down.setEnabled(enable);
        zoomIn.setEnabled(enable);
        zoomOut.setEnabled(enable);
        options.setEnabled(enable);
    }
}
